// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminRpcServiceClient is the client API for AdminRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminRpcServiceClient interface {
	GetAdminInfo(ctx context.Context, in *QueryId, opts ...grpc.CallOption) (*Admin, error)
}

type adminRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminRpcServiceClient(cc grpc.ClientConnInterface) AdminRpcServiceClient {
	return &adminRpcServiceClient{cc}
}

func (c *adminRpcServiceClient) GetAdminInfo(ctx context.Context, in *QueryId, opts ...grpc.CallOption) (*Admin, error) {
	out := new(Admin)
	err := c.cc.Invoke(ctx, "/pb.AdminRpcService/GetAdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminRpcServiceServer is the server API for AdminRpcService service.
// All implementations must embed UnimplementedAdminRpcServiceServer
// for forward compatibility
type AdminRpcServiceServer interface {
	GetAdminInfo(context.Context, *QueryId) (*Admin, error)
	mustEmbedUnimplementedAdminRpcServiceServer()
}

// UnimplementedAdminRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminRpcServiceServer struct {
}

func (UnimplementedAdminRpcServiceServer) GetAdminInfo(context.Context, *QueryId) (*Admin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminInfo not implemented")
}
func (UnimplementedAdminRpcServiceServer) mustEmbedUnimplementedAdminRpcServiceServer() {}

// UnsafeAdminRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminRpcServiceServer will
// result in compilation errors.
type UnsafeAdminRpcServiceServer interface {
	mustEmbedUnimplementedAdminRpcServiceServer()
}

func RegisterAdminRpcServiceServer(s grpc.ServiceRegistrar, srv AdminRpcServiceServer) {
	s.RegisterService(&AdminRpcService_ServiceDesc, srv)
}

func _AdminRpcService_GetAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRpcServiceServer).GetAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdminRpcService/GetAdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRpcServiceServer).GetAdminInfo(ctx, req.(*QueryId))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminRpcService_ServiceDesc is the grpc.ServiceDesc for AdminRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdminRpcService",
	HandlerType: (*AdminRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdminInfo",
			Handler:    _AdminRpcService_GetAdminInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
